{"version":3,"sources":["logo.svg","components/stateTable.js","components/combined.js","components/navbar.js","authorization.js","components/worldstats.js","store/actions.js","App.js","serviceWorker.js","store/index.js","store/countryreducer.js","store/initalData.js","index.js"],"names":["module","exports","StateTable","props","filteredData","useMemo","stateData","filter","item","index","state","map","dt","key","active","confirmed","deaths","recovered","totaltested","Combined","useState","stats","setStats","totalCases","setTotalCases","useEffect","finalStateData","axios","get","then","response","stateWiseTest","data","states_tested_data","DateArray","updatedon","split","finalDate","join","reverse","self","findIndex","t","totalNoOfCases","parseInt","reduce","accu","sum","statewise","i","length","j","className","Navbar","to","exact","authorization","WorldStats","worldStats","setWorldStats","search","setSearch","singleStat","useSelector","allstats","dispatch","useDispatch","countryData","countryName","useRef","config","headers","lat","lon","navigator","geolocation","getCurrentPosition","position","coords","latitude","toString","longitude","current","country","getCountryData","console","log","query","searchQuery","countryname","payload","type","filteredCountry","initialCountry","total_cases","total_deaths","total_recovered","onSubmit","e","preventDefault","placeholder","value","onChange","event","target","ct","country_name","cases","active_cases","App","Fragment","path","component","Worldstats","Boolean","window","location","hostname","match","reducer","combineReducers","action","twocountries","countries_stat","filtercountry","store","createStore","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f858d3f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useMemo } from \"react\";\r\n\r\nconst StateTable = (props) => {\r\n  const storeData = useMemo(() => props.stateData, [props.stateData]);\r\n  const filteredData = storeData.filter(\r\n    (item, index) => item.state !== \"Total\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td>State</td>\r\n            <td>Active</td>\r\n            <td>Confirmed</td>\r\n            <td>Deaths</td>\r\n            <td>Recovered</td>\r\n            <td>Total Tests</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredData\r\n            ? filteredData.map((dt) => (\r\n                <tr key={dt.state}>\r\n                  <td>{dt.state}</td>\r\n                  <td>{dt.active}</td>\r\n                  <td>{dt.confirmed}</td>\r\n                  <td>{dt.deaths}</td>\r\n                  <td>{dt.recovered}</td>\r\n                  <td>{dt.totaltested ? dt.totaltested : \"-\"}</td>\r\n                </tr>\r\n              ))\r\n            : null}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\nexport default StateTable;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport StateTable from \"./stateTable\";\r\n\r\nconst Combined = () => {\r\n  const [stats, setStats] = useState([]);\r\n  const [totalCases, setTotalCases] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let finalStateData;\r\n    // Total Test Cases\r\n    axios\r\n      .get(\"https://api.covid19india.org/state_test_data.json\")\r\n      .then((response) => {\r\n        let filterStateTest = response.data.states_tested_data.map((item) => {\r\n          let formatdate = item.updatedon;\r\n          let DateArray = formatdate.split(\"/\");\r\n          [DateArray[0], DateArray[1]] = [DateArray[1], DateArray[0]];\r\n          let finalDate = DateArray.join(\"/\");\r\n          return { ...item, updatedon: finalDate };\r\n        });\r\n\r\n        //Getting latest total cases tests\r\n        let stateWiseTest = filterStateTest\r\n          .reverse()\r\n          .filter(\r\n            (item, index, self) =>\r\n              index ===\r\n              self.findIndex(\r\n                (t) => t.state === item.state && t.totaltested !== \"\"\r\n              )\r\n          );\r\n\r\n        //Setting total tested cases to 0 for the state where there are no case tested\r\n        let filteredCases = stateWiseTest.map((item) => {\r\n          return parseInt(item.totaltested !== \"\" ? item.totaltested : 0);\r\n        });\r\n        //Overall Country Tests\r\n        let totalNoOfCases = filteredCases.reduce((accu, sum) => {\r\n          return accu + sum;\r\n        }, 0);\r\n        setTotalCases(totalNoOfCases);\r\n\r\n        //Getting State wise data plus adding latest totalcase tested to every state\r\n        axios.get(\"https://api.covid19india.org/data.json\").then((response) => {\r\n          finalStateData = response.data.statewise;\r\n          for (let i = 0; i < finalStateData.length; i++) {\r\n            for (let j = 0; j < stateWiseTest.length; j++) {\r\n              if (finalStateData[i].state === stateWiseTest[j].state) {\r\n                finalStateData[i].totaltested = stateWiseTest[j].totaltested;\r\n              }\r\n            }\r\n          }\r\n          setStats(finalStateData);\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>India COVID-19 Stats</h1>\r\n      <div className=\"stats-wrapper\">\r\n        <div>\r\n          <h2>Active</h2>\r\n          <h3>{stats[0] ? stats[0].active : \"-\"} </h3>\r\n        </div>\r\n        <div>\r\n          <h2>Confirmed</h2>\r\n          <h3>{stats[0] ? stats[0].confirmed : \"-\"} </h3>\r\n        </div>\r\n        <div>\r\n          <h2>Deaths</h2>\r\n          <h3>{stats[0] ? stats[0].deaths : \"-\"}</h3>\r\n        </div>\r\n        <div>\r\n          <h2>Recovered</h2>\r\n          <h3>{stats[0] ? stats[0].recovered : \"-\"}</h3>\r\n        </div>\r\n        <div>\r\n          <h2>Total Tests</h2>\r\n          <h3>{totalCases}</h3>\r\n        </div>\r\n      </div>\r\n      <StateTable stateData={stats} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Combined;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"navbar\">\r\n        <ul className=\"navlist\">\r\n          <li className=\"navlinks\">\r\n            <NavLink to=\"/\" active exact>\r\n              Home\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"navlinks\">\r\n            <NavLink to=\"/world_stats\" exact>\r\n              World Stats\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export const authorization = {\r\n  \"X-RapidAPI-Host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n  \"X-RapidAPI-Key\": \"68781a08bcmsh8884703f7285062p1d71e1jsnf3468378e101\",\r\n};\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { authorization } from \"../authorization\";\r\nimport { initialCountry, filteredCountry } from \"../store/actions\";\r\n\r\nconst WorldStats = () => {\r\n  const [worldStats, setWorldStats] = useState({});\r\n  const [search, setSearch] = useState(\"\");\r\n  const singleStat = useSelector((state) => state.allstats);\r\n  const dispatch = useDispatch();\r\n\r\n  let countryData = singleStat;\r\n  let countryName = useRef(null);\r\n\r\n  const config = {\r\n    headers: authorization,\r\n  };\r\n  useEffect(() => {\r\n    let lat, lon;\r\n    //Geolocation\r\n    const Geolocation = () => {\r\n      const showposition = (position) => {\r\n        lat = position.coords.latitude.toString();\r\n        lon = position.coords.longitude.toString();\r\n        axios\r\n          .get(`https://geocode.xyz/${lat},${lon}?json=1`)\r\n          .then((response) => {\r\n            countryName.current = response.data.country;\r\n            getCountryData(null, countryName.current);\r\n          });\r\n      };\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(showposition);\r\n      } else {\r\n        console.log(\"Geolocation is not supported by this browser.\");\r\n      }\r\n    };\r\n    Geolocation();\r\n    getCountryData();\r\n\r\n    //Starting World Stats\r\n    axios\r\n      .get(\r\n        \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\",\r\n        config\r\n      )\r\n      .then((response) => {\r\n        setWorldStats(response.data);\r\n      });\r\n  }, []);\r\n\r\n  //On Form Submit\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    getCountryData(search);\r\n  };\r\n\r\n  //Filtered Data\r\n  const getCountryData = (query, countryName) => {\r\n    const searchQuery = query;\r\n    const countryname = countryName;\r\n    axios\r\n      .get(\r\n        \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\",\r\n        config\r\n      )\r\n      .then((response) => {\r\n        searchQuery\r\n          ? dispatch(filteredCountry(response.data, searchQuery))\r\n          : dispatch(initialCountry(response.data, countryname));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>World Stats</h1>\r\n      <div className=\"stats-wrapper world-stats\">\r\n        <div>\r\n          <h2>Total Cases</h2>\r\n          <h3>{worldStats ? worldStats.total_cases : \"-\"} </h3>\r\n        </div>\r\n        <div>\r\n          <h2>Total Deaths</h2>\r\n          <h3>{worldStats ? worldStats.total_deaths : \"-\"} </h3>\r\n        </div>\r\n        <div>\r\n          <h2>Total Recovered</h2>\r\n          <h3>{worldStats ? worldStats.total_recovered : \"-\"} </h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"searchbar\">\r\n        <form onSubmit={submitHandler}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your country...\"\r\n            value={search}\r\n            onChange={(event) => setSearch(event.target.value)}\r\n          />\r\n          <button>Search</button>\r\n        </form>\r\n      </div>\r\n      <div className=\"search-results\">\r\n        {countryData ? (\r\n          countryData.allstats.map((ct) => (\r\n            <div className=\"country-stats\" key={ct.country_name}>\r\n              <h2>{ct.country_name}</h2>\r\n              <h3>Total Cases: {ct.cases}</h3>\r\n              <h3>Active Cases: {ct.active_cases}</h3>\r\n              <h3>Total Deaths: {ct.deaths}</h3>\r\n              <h3>Recovered: {ct.total_recovered}</h3>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>Country Not Found</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default WorldStats;\r\n","export const filteredCountry = (payload, query) => ({\r\n  type: \"SEARCHCOUNTRY\",\r\n  payload: payload,\r\n  query: query,\r\n});\r\n\r\nexport const initialCountry = (payload, countryname) => ({\r\n  type: \"INITIALLOAD\",\r\n  payload: payload,\r\n  countryName: countryname,\r\n});\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Combined from \"./components/combined\";\nimport Navbar from \"./components/navbar\";\nimport Worldstats from \"./components/worldstats\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" component={Combined} exact />\n          <Route path=\"/world_stats\" component={Worldstats} exact />\n        </Switch>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\r\nimport { InitialData } from \"./initalData\";\r\nimport { countryReducer } from \"./countryreducer\";\r\n\r\nconst reducer = combineReducers({\r\n  allstats: countryReducer,\r\n});\r\n\r\nconst store = createStore(\r\n  (state, action) => reducer(state, action),\r\n  InitialData\r\n);\r\n\r\nexport default store;\r\n","export const countryReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case \"INITIALLOAD\":\r\n      const twocountries = action.payload.countries_stat.filter(\r\n        (item, index) => {\r\n          if (index > 0 && index < 3) {\r\n            return item;\r\n          }\r\n        }\r\n      );\r\n      const initialCountry = action.payload.countries_stat.filter(\r\n        (item, index) => {\r\n          if (item.country_name == action.countryName) {\r\n            return item;\r\n          }\r\n        }\r\n      );\r\n      return { ...state, allstats: [...initialCountry, ...twocountries] };\r\n      break;\r\n    case \"SEARCHCOUNTRY\":\r\n      const filtercountry = action.payload.countries_stat.filter(\r\n        (item) => item.country_name == action.query\r\n      );\r\n      return { ...state, allstats: filtercountry };\r\n      break;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// import { authorization } from \"../authorization\";\r\n\r\n// const InitialData = () => {\r\n//   const [getAllStats, setAllStats] = useState([]);\r\n//   const config = {\r\n//     headers: authorization,\r\n//   };\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(\r\n//         \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\",\r\n//         config\r\n//       )\r\n//       .then((response) => {\r\n//         console.log(response);\r\n//         setAllStats({ allstats: response.data });\r\n//       });\r\n//   }, []);\r\n//   //   return getAllStats;\r\n// };\r\nexport const InitialData = {};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}